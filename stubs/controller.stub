<?php

namespace {%controller_namespace%};

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use {%model_namespace%}\{%model_class%};

class {%model_class%}Controller extends Controller
{
    protected $page_path = '{%page_path%}.';
    public function __construct()
    {
        $this->middleware(['auth_admin', 'can:access-admin-panel']);
        $this->middleware('intend_url')->only(['index', 'read']);
        $this->middleware('can:create-{%permission_string%}')->only(['create', 'store']);
        $this->middleware('can:read-{%permission_string%}')->only(['index', 'read']);
        $this->middleware('can:update-{%permission_string%}')->only(['edit', 'update']);
        $this->middleware('can:delete-{%permission_string%}')->only('destroy');

        // to protect your activity and reauthenticate if user is genuine
        // $this->middleware('reauth_admin')->only(['edit','destroy']);

        {%brand_view_namespace%}
        if (false == app()->runningInConsole()) {
            \Breadcrumbs::for('home', function ($trail) {
                $trail->push('{%permission_string%} Listing', route('{%model_variable%}'));
            });
        }
    }

    public function index(Request $request)
    {
        if ($request->ajax()) {
            $models = {%model_class%}::query()
                ->checkBrand()
                ->filter($request->get('filters', ''))
                ->sorting($request->get('sort', ''),$request->get('direction', ''));
            $paginated = $models->paginate($request->get('take', 25));
            foreach ($paginated as $model) {
                $model->actionsView = view($this->page_path.'{%model_variable%}.actions',compact('model'))->render();
            }
            if ($request->get('filters','') != '') {
                $paginated->appends(['filters' => $request->get('filters','')]);
            }
            if ($request->get('sort','') != '') {
                $paginated->appends(['sort' => $request->get('sort',''), 'direction' => $request->get('direction','asc')]);
            }
            $links = $paginated->onEachSide(5)->links()->render();
            $currentUrl = $request->fullUrl();
            return compact('paginated','links','currentUrl');
        }
        $getUrl = route('{%model_variable%}');
        $html = [
            {%table_fields%}
            ['title' => '', 'data' => 'actionsView'],
        ];
        return view($this->page_path.'{%model_variable%}.index', compact('html','getUrl'));
    }

    public function create(Request $request)
    {
        \Breadcrumbs::for('breadcrumb', function ($trail) {
            $trail->parent('home');
            $trail->push('New {%model_string%}');
        });
        return view($this->page_path.'{%model_variable%}.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            {%validations_create%}
        ]);
        {%upload_strings%}
        $request->merge([
            'created_by' => auth()->id(),
            'updated_by' => auth()->id(),
        ]);

        $model = {%model_class%}::query()->create($request->input());

        sendAlert([
            'brand_id' => 0,
            'link' => $model->readUrl,
            'message' => 'New '.$model->activity_name.' Added.',
            'sender_id' => auth()->id(),
            'receiver_id' => permissionUserIds('Read {%permission_string%}'),
            'icon' => $model->menu_icon
        ]);

        return response()->json([
            'status' => 'success',
            'flash' => '{%model_class%} Created.',
            'reload' => false,
            'relist' => false,
            'redirect' => route('{%model_variable%}'),
        ]);
    }

    public function show({%model_class%} $model)
    {
        \Breadcrumbs::for('breadcrumb', function ($trail) {
            $trail->parent('home');
            $trail->push('Show {%model_string%}');
        });
        return view($this->page_path.'{%model_variable%}.show', compact('model'));
    }

    public function edit(Request $request, {%model_class%} $model)
    {
        \Breadcrumbs::for('breadcrumb', function ($trail) {
            $trail->parent('home');
            $trail->push('Edit {%model_string%}');
        });
        return view($this->page_path.'{%model_variable%}.edit', compact('model'));
    }

    public function update(Request $request, {%model_class%} $model)
    {
        $request->validate([
            {%validations_update%}
        ]);
        {%upload_strings%}
        $request->merge([
            'updated_by' => auth()->id(),
        ]);

        $model->update($request->input());

        sendAlert([
            'brand_id' => 0,
            'link' => $model->readUrl,
            'message' => $model->activity_name.' Updated.',
            'sender_id' => auth()->id(),
            'receiver_id' => permissionUserIds('Read {%permission_string%}'),
            'icon' => $model->menu_icon
        ]);

        return response()->json([
            'status' => 'success',
            'flash' => '{%model_class%} Updated.',
            'reload' => false,
            'relist' => false,
            'redirect' => route('{%model_variable%}.edit',[$model->id]),
        ]);
    }

    public function destroy({%model_class%} $model)
    {
        sendAlert([
            'brand_id' => 0,
            'link' => null,
            'message' => $model->activity_name.' Deleted.',
            'sender_id' => auth()->id(),
            'receiver_id' => permissionUserIds('Read {%permission_string%}'),
            'icon' => $model->menu_icon
        ]);
        $model->delete();
        return response()->json([
            'status' => 'success',
            'flash' => '{%model_class%} Deleted.',
            'reload' => false,
            'relist' => true,
            'redirect' => false,
        ]);
    }

    {%orderable_controller%}
}
