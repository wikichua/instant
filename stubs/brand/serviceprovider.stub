<?php

namespace Brand\{%brand_name%}\Providers;

use Illuminate\Support\Facades\Blade;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;

class {%brand_name%}ServiceProvider extends ServiceProvider
{
    public function register()
    {
        $dir = base_path('brand/{%brand_name%}/config');
        if (File::isDirectory($dir)) {
            $files = File::files($dir);
            foreach ($files as $confFile) {
                $name = str_replace('.php', '', basename($confFile));
                // $this->mergeConfigFrom($confFile, $name);
                Config::set($name, require($confFile));
            }
        }
        getBrand('{%brand_name%}');
    }
    public function boot()
    {
        $this->app['router']->aliasMiddleware('{%brand_string%}', 'Brand\{%brand_name%}\Middlewares\AuthMiddleware');

        View::addNamespace('{%brand_string%}', config('main.resources_path',base_path('brand/{%brand_name%}/resources/views')));
        Blade::componentNamespace('Brand\\{%brand_name%}\\Components', '{%brand_string%}');
        // <x-{%brand_string%}::component-name />
        $this->loadTranslationsFrom(base_path('brand/{%brand_name%}/resources/lang'), '{%brand_string%}');
        $this->app['router']->pushMiddlewareToGroup('web', \Brand\{%brand_name%}\Middlewares\{%brand_name%}Middleware::class);
    }
}
